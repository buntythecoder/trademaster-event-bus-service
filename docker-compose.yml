# ✅ PRODUCTION DOCKER COMPOSE: Event Bus Service Development Environment
# Java 24 + Virtual Threads + Complete Infrastructure Stack

version: '3.8'

services:
  # ✅ EVENT BUS SERVICE: Main application service
  event-bus-service:
    build:
      context: .
      dockerfile: Dockerfile
    image: trademaster/event-bus-service:1.0.0
    container_name: event-bus-service
    ports:
      - "8099:8099"    # Main service port
      - "8090:8090"    # Management port
    environment:
      # ✅ VIRTUAL THREADS: Enable Java 24 Virtual Threads
      - JAVA_OPTS=--enable-preview -XX:+UseZGC -XX:MaxRAMPercentage=75.0
      - SPRING_PROFILES_ACTIVE=docker
      
      # ✅ DATABASE: PostgreSQL configuration
      - DATABASE_URL=jdbc:postgresql://postgres:5432/trademaster_eventbus
      - DATABASE_USERNAME=eventbus_user
      - DATABASE_PASSWORD=eventbus_secure_password
      
      # ✅ CACHE: Redis configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_secure_password
      
      # ✅ MESSAGING: Kafka configuration
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      
      # ✅ SECURITY: JWT configuration
      - JWT_SECRET=trademaster-event-bus-production-secret-key-256-bit
      
      # ✅ MONITORING: Observability configuration
      - MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE=health,metrics,info,prometheus,circuitbreakers
      - MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS=always
      
      # ✅ PERFORMANCE: SLA thresholds
      - TRADEMASTER_PERFORMANCE_SLA_CRITICAL_MS=25
      - TRADEMASTER_PERFORMANCE_SLA_HIGH_MS=50
      - TRADEMASTER_PERFORMANCE_SLA_STANDARD_MS=100
      - TRADEMASTER_PERFORMANCE_SLA_BACKGROUND_MS=500
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - trademaster-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8099/event-bus/api/v1/health/live"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s

  # ✅ DATABASE: PostgreSQL 15 with performance optimization
  postgres:
    image: postgres:15-alpine
    container_name: eventbus-postgres
    environment:
      - POSTGRES_DB=trademaster_eventbus
      - POSTGRES_USER=eventbus_user
      - POSTGRES_PASSWORD=eventbus_secure_password
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U eventbus_user -d trademaster_eventbus"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200

  # ✅ CACHE: Redis 7 with persistence and security
  redis:
    image: redis:7-alpine
    container_name: eventbus-redis
    environment:
      - REDIS_PASSWORD=redis_secure_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf

  # ✅ MESSAGING: Apache Kafka 3.0 with Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: eventbus-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - trademaster-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: eventbus-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      # ✅ PERFORMANCE: Kafka optimization
      KAFKA_NUM_PARTITIONS: 8
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_COMPRESSION_TYPE: lz4
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ✅ MONITORING: Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: eventbus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - trademaster-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # ✅ MONITORING: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: eventbus-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin_secure_password
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - trademaster-network
    restart: unless-stopped
    depends_on:
      - prometheus

# ✅ NETWORKS: Isolated network for services
networks:
  trademaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ✅ VOLUMES: Persistent data storage
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local