# ✅ PRODUCTION KUBERNETES: Event Bus Service Deployment
# Java 24 + Virtual Threads + Production-Ready Configuration

apiVersion: v1
kind: Namespace
metadata:
  name: trademaster
  labels:
    name: trademaster
    environment: production

---
# ✅ CONFIGMAP: Application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: event-bus-config
  namespace: trademaster
data:
  SPRING_PROFILES_ACTIVE: "kubernetes"
  JAVA_OPTS: "--enable-preview -XX:+UseZGC -XX:MaxRAMPercentage=75.0 -XX:+UseCompressedOops"
  
  # ✅ PERFORMANCE: SLA configuration
  TRADEMASTER_PERFORMANCE_SLA_CRITICAL_MS: "25"
  TRADEMASTER_PERFORMANCE_SLA_HIGH_MS: "50"
  TRADEMASTER_PERFORMANCE_SLA_STANDARD_MS: "100"
  TRADEMASTER_PERFORMANCE_SLA_BACKGROUND_MS: "500"
  
  # ✅ MONITORING: Observability configuration
  MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "health,metrics,info,prometheus,circuitbreakers"
  MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: "always"
  MANAGEMENT_ENDPOINT_HEALTH_PROBES_ENABLED: "true"
  
  # ✅ DATABASE: Connection configuration
  DATABASE_URL: "jdbc:postgresql://postgres-service:5432/trademaster_eventbus"
  DATABASE_USERNAME: "eventbus_user"
  
  # ✅ CACHE: Redis configuration  
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  
  # ✅ MESSAGING: Kafka configuration
  KAFKA_BOOTSTRAP_SERVERS: "kafka-service:9092"

---
# ✅ SECRET: Sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: event-bus-secrets
  namespace: trademaster
type: Opaque
stringData:
  DATABASE_PASSWORD: "eventbus_secure_password_k8s"
  REDIS_PASSWORD: "redis_secure_password_k8s"
  JWT_SECRET: "trademaster-event-bus-k8s-secret-key-256-bit-production"

---
# ✅ DEPLOYMENT: Event Bus Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: event-bus-service
  namespace: trademaster
  labels:
    app: event-bus-service
    version: v1.0.0
    component: messaging
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: event-bus-service
  template:
    metadata:
      labels:
        app: event-bus-service
        version: v1.0.0
        component: messaging
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8099"
        prometheus.io/path: "/event-bus/actuator/prometheus"
    spec:
      serviceAccountName: event-bus-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: event-bus-service
        image: trademaster/event-bus-service:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8099
          protocol: TCP
        - name: management
          containerPort: 8090
          protocol: TCP
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        envFrom:
        - configMapRef:
            name: event-bus-config
        - secretRef:
            name: event-bus-secrets
        
        # ✅ HEALTH CHECKS: Kubernetes probes
        livenessProbe:
          httpGet:
            path: /event-bus/api/v1/health/live
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /event-bus/api/v1/health/ready
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        startupProbe:
          httpGet:
            path: /event-bus/api/v1/health/live
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
          successThreshold: 1
        
        # ✅ RESOURCES: Production resource limits
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        
        # ✅ SECURITY: Security context
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          runAsGroup: 1001
          capabilities:
            drop:
            - ALL
        
        # ✅ VOLUMES: Temporary and log volumes
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
        - name: logs-volume
          mountPath: /app/logs
      
      volumes:
      - name: tmp-volume
        emptyDir: {}
      - name: logs-volume
        emptyDir: {}
      
      # ✅ SCHEDULING: Node affinity and pod distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - event-bus-service
              topologyKey: kubernetes.io/hostname

---
# ✅ SERVICE: Event Bus Service
apiVersion: v1
kind: Service
metadata:
  name: event-bus-service
  namespace: trademaster
  labels:
    app: event-bus-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8099"
    prometheus.io/path: "/event-bus/actuator/prometheus"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8099
    targetPort: http
    protocol: TCP
  - name: management
    port: 8090
    targetPort: management
    protocol: TCP
  selector:
    app: event-bus-service

---
# ✅ SERVICE ACCOUNT: RBAC configuration
apiVersion: v1
kind: ServiceAccount
metadata:
  name: event-bus-service-account
  namespace: trademaster

---
# ✅ INGRESS: External access configuration
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: event-bus-ingress
  namespace: trademaster
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "16m"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - event-bus.trademaster.com
    secretName: event-bus-tls
  rules:
  - host: event-bus.trademaster.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: event-bus-service
            port:
              number: 8099

---
# ✅ HPA: Horizontal Pod Autoscaler
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: event-bus-hpa
  namespace: trademaster
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: event-bus-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60

---
# ✅ PDB: Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: event-bus-pdb
  namespace: trademaster
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: event-bus-service

---
# ✅ NETWORK POLICY: Security network isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: event-bus-network-policy
  namespace: trademaster
spec:
  podSelector:
    matchLabels:
      app: event-bus-service
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: trademaster
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8099
    - protocol: TCP
      port: 8090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: trademaster
    ports:
    - protocol: TCP
      port: 5432  # PostgreSQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 9092  # Kafka
  - to: []
    ports:
    - protocol: UDP
      port: 53    # DNS